/**
 *	Namespace declaration
 *
 *	@author Alexandre Masy
 **/
(function(window)
{
	'use strict';
	
	/**
	 *	app base namespace
	 *	@namespace app
	 */
	window.app = (typeof(app) != 'undefined') ? app : {};

	/**
	 *	Views (Dom manipulation)
	 *	@namespace app.view
	 */
	window.app.view = {};

})(window);
(function(window) {
	'use strict';

	/**
	 *	Application controller
	 *	
	 *	@author Alexandre Masy
	 */
	app.Application = Class.extend({

		//===========/----------------------------------------------
		//  [_PRO]  /  Properties
		//=========/------------------------------------------------

		/**
		 *	Current default value
		 **/
		_currentRendering : null,

		/**	
		 *	Fullscreen display
		 **/
		_fullscreen: false,

		//===========/----------------------------------------------
		//  [_GET]  /  Getters Setters
		//=========/------------------------------------------------

		/**
		 *	Define the current rendering method
		 *
		 *	@param value String
		 **/
		setRendering: function( value )
		{
			if ( value == this._currentRendering )
				return; 

			this._currentRendering = value;
			this.update();
		},

		/**
		 *	Set the fullscreen mode
		 *
		 *	@param value Boolean
		 **/
		setFullscreen: function( value )
		{
			if ( value == this._fullscreen )
				return;

			this._fullscreen = value;
			this.update();
		},

		//===========/----------------------------------------------
		//  [_MTD]  /  Methods public
		//=========/------------------------------------------------

		/**
		 *	El constructor
		 **/
		construct: function() 
		{
			this.init();
		},

		/**
		 *	Init the class
		 **/
		init: function() 
		{
			// fps
			this.meter = new FPSMeter( document.getElementById('fps'), {
				theme: 'dark',
				graph: true,

				position: 'relative'
			});

			// forms
			this.fullscreen = jQuery('#fullscreen').on('change', onChangeHandler.bind(this) );
			this.rendering = jQuery('#rendering').on('change', onChangeHandler.bind(this) );

			// managers
			this.animated = new app.view.AnimatedGif( jQuery('#gif') );
			this.canvas = new app.view.CanvasGif( jQuery('#spritesheet') );
			this.dom = new app.view.DomGif( jQuery('#dom') );

			// start
			this.setRendering( app.Data.GIF )
			this.meter.tickStart();
			this.render();
		},

		/**
		 *	Update the application
		 **/
		update: function()
		{
			console.log('update', this._currentRendering, this._fullscreen);
			switch( this._currentRendering )
			{
				case app.Data.GIF:
				default:
					this.animated.show();
					this.canvas.hide();
					this.dom.hide();
					break;

				case app.Data.CANVAS:
					this.animated.hide();
					this.canvas.show();
					this.dom.hide();
					break;

				case app.Data.DOM:
					this.animated.hide();
					this.canvas.hide();
					this.dom.show();
					break;
			}

			this.animated.fullscreen( this._fullscreen );
			this.canvas.fullscreen( this._fullscreen );
			this.dom.fullscreen( this._fullscreen );
		},

		/**
		 *	Animation frame render
		 **/
		render: function()
		{
			requestAnimationFrame(this.render.bind(this));

			this.meter.tick();
		}
	});

	//===========/----------------------------------------------
	//  [_PRI]  /  Methods private
	//=========/------------------------------------------------

	/**
	 *	Change handler
	 *
	 *	@param event Event
	 **/
	function onChangeHandler( event )
	{
		this.setRendering( this.rendering.val() );
		this.setFullscreen( this.fullscreen.is(':checked') );
	}

})(window);
(function(window) {
	'use strict';

	/**
	 *	Store application data
	 *	
	 *	@author Alexandre Masy
	 */
	app.Data = Class.extend({
		//===========/----------------------------------------------
		//  [_PRO]  /  Properties
		//=========/------------------------------------------------

		/**
		 *	Animated Gif 
		 **/
		GIF: 'gif',

		/**
		 *	Canvas animation
		 **/
		CANVAS: 'canvas',

		/**
		 *	Dom & TweenMax animation
		 **/
		DOM: 'dom',

		/**
		 *	Rendering mode
		 **/
		rendering: 'gif',

		//===========/----------------------------------------------
		//  [_GET]  /  Getters Setters
		//=========/------------------------------------------------

		//===========/----------------------------------------------
		//  [_MTD]  /  Methods public
		//=========/------------------------------------------------

		/**
		 *	El constructor
		 **/
		construct: function() 
		{
			this.init();
		},

		/**
		 *	Init the class
		 **/
		init: function() 
		{
		}
	}).prototype;
})(window);
/**
 *	Start the application
 *
 *	@author Alexandre Masy
 */
(function(window)
{
	'use strict';
	
	/**
	 *	Document ready event
	 */
	jQuery("document").ready(function(event)
	{
		new app.Application();
	});

})(window);
(function(window) {
	'use strict';

	/**
	 *	AnimatedGif
	 *	
	 *	@author Alexandre Masy
	 */
	app.view.AnimatedGif = Class.extend({

		//===========/----------------------------------------------
		//  [_PRO]  /  Properties
		//=========/------------------------------------------------

		//===========/----------------------------------------------
		//  [_GET]  /  Getters Setters
		//=========/------------------------------------------------

		//===========/----------------------------------------------
		//  [_MTD]  /  Methods public
		//=========/------------------------------------------------

		/**
		 *	El constructor
		 *
		 *	@param view jQueryElement
		 **/
		construct: function( view ) 
		{
			this.view = view;

			this.init();
		},
		
		/**
		 *	Init the class
		 **/
		init: function() 
		{
			this.hide();	
		},

		/**
		 *	Show the view
		 **/
		show: function() 
		{
			this.view.removeClass('hidden');
		},

		/**
		 *	Hide the view
		 **/
		hide: function() 
		{
			this.view.addClass('hidden');
		},

		/**
		 *	Display fullscreen or not
		 *
		 *	@param value Boolean
		 **/
		fullscreen: function( value )
		{
			if (value)
				this.view.addClass('fullscreen');
			else
				this.view.removeClass('fullscreen');
		}
	});

	//===========/----------------------------------------------
	//  [_PRI]  /  Methods private
	//=========/------------------------------------------------

})(window);
(function(window) {
	'use strict';

	/**
	 *	CanvasGif
	 *	
	 *	@author Alexandre Masy
	 */
	app.view.CanvasGif = Class.extend({

		//===========/----------------------------------------------
		//  [_PRO]  /  Properties
		//=========/------------------------------------------------

		/**
		 *	Fullscreen display
		 **/
		_fullscreen: false,

		//===========/----------------------------------------------
		//  [_GET]  /  Getters Setters
		//=========/------------------------------------------------

		//===========/----------------------------------------------
		//  [_MTD]  /  Methods public
		//=========/------------------------------------------------

		/**
		 *	El constructor
		 *
		 *	@param view jQueryElement
		 **/
		construct: function( view ) 
		{
			this.view = view;
			this.init();
		},

		/**
		 *	Init the class
		 **/
		init: function() 
		{
			this.hide();

			this.win = jQuery(window);
			var img = jQuery('#sprite');
			this.si = new app.view.SpriteImage( img, onSpriteComplete.bind(this) );
			this.canvas = jQuery('canvas');
			
			this.stage = new createjs.Stage( this.canvas[0] );
			createjs.Ticker.setFPS(60);
		},

		/**
		 *	Create the children
		 **/
		createChildren: function()
		{
			this.sprite = this.si.getSprite();
			this.stage.addChild( this.sprite );
			this.sprite.play();

			this.updateLayout();
		},

		/**
		 *	Show the view
		 **/
		show: function() 
		{
			this.view.removeClass('hidden');
			createjs.Ticker.addEventListener('tick', this.stage );
		},

		/**
		 *	Hide the view
		 **/
		hide: function() 
		{
			this.view.addClass('hidden');

			createjs.Ticker.removeEventListener( 'tick', this.stage );
		},

		/**
		 *	Update the layout
		 **/
		updateLayout: function()
		{
			var w = 0;
			var h = 0;

			if ( this._fullscreen )
			{
				w = this.win.width();
				h = this.win.height();
			}
			else
			{
				w = this.si.getWidth();
				h = this.si.getHeight();
			}

			this.canvas.attr({
				width: w,
				height: h
			});

			if (this.sprite)
			{
				var r = 1;
				if ( w > h )
				{
					r = h/this.si.getHeight();
				}
				else
				{
					r = w/this.si.getWidth();
				}
				var rw = r*this.si.getWidth() |0;
				var rh = r*this.si.getHeight() |0;

				this.sprite.x = ( w - rw )>>1;
				this.sprite.y = ( h - rh )>>1;

				this.sprite.scaleX =
				this.sprite.scaleY = r;
			}

		},

		/**
		 *	Display fullscreen or not
		 *
		 *	@param value Boolean
		 **/
		fullscreen: function( value )
		{
			this._fullscreen = value;

			if (value)
				this.view.addClass('fullscreen');
			else
				this.view.removeClass('fullscreen');

			this.updateLayout();
		}

	});

	//===========/----------------------------------------------
	//  [_PRI]  /  Methods private
	//=========/------------------------------------------------
	
	/**
	 *	Sprite setup complete
	 **/
	function onSpriteComplete()
	{
		console.log('sprite ready');
		this.createChildren();
	}

	/**
	 *	Tick handler
	 **/
	function onTickHandler()
	{
		if (this.stage)
			this.stage.update();
	}

})(window);
(function(window) {
	'use strict';

	/**
	 *	DomGif
	 *	
	 *	@author Alexandre Masy
	 */
	app.view.DomGif = Class.extend({

		//===========/----------------------------------------------
		//  [_PRO]  /  Properties
		//=========/------------------------------------------------

		/**
		 *	Fullscreen display
		 **/
		_fullscreen: false,


		//===========/----------------------------------------------
		//  [_GET]  /  Getters Setters
		//=========/------------------------------------------------

		//===========/----------------------------------------------
		//  [_MTD]  /  Methods public
		//=========/------------------------------------------------

		/**
		 *	El constructor
		 *
		 *	@param view jQueryElement
		 **/
		construct: function( view ) 
		{
			this.view = view;
			this.init();
		},
		
		/**
		 *	Init the class
		 **/
		init: function() 
		{
			this.hide();

			this.container = this.view.find('.container');
			this.win = jQuery(window);

			var img = jQuery('#sprite');
			this.si = new app.view.SpriteImage( img, onSpriteComplete.bind(this) );
		},

		/**
		 *	Create the children
		 **/
		createChildren: function()
		{
			var n = this.si.getLength();
			var prev, div, show, hide, tweens;
			this.timeline = new TimelineMax({repeat:-1});
			var speed = 1/this.si.getFramerate();

			while( n-- )
			{
				if ( div )
					prev = div;

				div = this.si.getFrame(n);

				// append
				this.container.append( div );

				// tweening
				tweens = [];
				if ( prev )
					tweens.push( TweenMax.to(prev, speed, {'display':'block', delay:speed}) );
				tweens.push( TweenMax.to(div, speed, {display:'none'}) );

				// timeline
				this.timeline.add(tweens);
			}

			this.frames = jQuery('.domframe');
			this.containers = jQuery('.domcontainer');
			this.updateLayout();
		},

		/**
		 *	Show the view
		 **/
		show: function() 
		{
			this.view.removeClass('hidden');
		},

		/**
		 *	Hide the view
		 **/
		hide: function() 
		{
			this.view.addClass('hidden');
		},

		/**
		 *	Display fullscreen or not
		 *
		 *	@param value Boolean
		 **/
		fullscreen: function( value )
		{
			this._fullscreen = value;

			if (value)
				this.view.addClass('fullscreen');
			else
				this.view.removeClass('fullscreen');

			this.updateLayout();
		},

		/** 
		 *	Update the layout
		 **/
		updateLayout: function()
		{
			if ( !this.frames )
				return;

			var w = 0;
			var h = 0;

			if ( this._fullscreen )
			{
				w = this.win.width();
				h = this.win.height();
			}
			else
			{
				w = this.si.getWidth();
				h = this.si.getHeight();
			}

			var r = 1;
			if ( w > h )
			{
				r = h/this.si.getHeight();
			}
			else
			{
				r = w/this.si.getWidth();
			}
			var rw = r*this.si.getWidth() |0;
			var rh = r*this.si.getHeight() |0;

			console.log( 'updateLayout', this._fullscreen, w, h );
			console.log( this.frames );

			TweenMax.set( this.containers, {
				scaleX: r,
				scaleY: r,
			});

			console.log( ( h - rh ) );

			TweenMax.set( this.container, {
				width: w,
				height: h
			});

			// TweenMax.set( this.containers, {
			// 	width: w,
			// 	height: h
			// })



			// this.sprite.x = ( w - rw )>>1;
			// this.sprite.y = ( h - rh )>>1;

			// this.sprite.scaleX =
			// this.sprite.scaleY = r;
		}


	});

	//===========/----------------------------------------------
	//  [_PRI]  /  Methods private
	//=========/------------------------------------------------

	/**
	 *	Sprite setup complete
	 **/
	function onSpriteComplete()
	{
		this.createChildren();
	}

})(window);
(function(window) {
	'use strict';

	/**
	 *	SpriteImage
	 *	
	 *	@author Alexandre Masy
	 */
	app.view.SpriteImage = Class.extend({

		//===========/----------------------------------------------
		//  [_PRO]  /  Properties
		//=========/------------------------------------------------

		/**
		 *	Width of the image
		 **/
		_width: 0,

		/**
		 *	Height of the image
		 **/
		_height: 0,

		/**
		 *	Image source
		 **/
		_src: null,

		/**
		 *	How many frames
		 **/
		_length: 0,

		/**
		 *	Duration of each image
		 **/
		_speed: 0,


		/**
		 *	Framerate
		 **/
		_framerate: 60,

		//===========/----------------------------------------------
		//  [_GET]  /  Getters Setters
		//=========/------------------------------------------------

		/**
		 *	Return the width
		 *
		 *	@return int
		 **/
		getWidth: function()
		{
			return this._width;
		},

		/**
		 *	Return the height
		 *
		 *	@return int
		 **/
		getHeight: function()
		{
			return this._height;
		},

		/**
		 *	Return the length, the number of images in the sprite
		 *
		 *	@return int
		 **/
		getLength: function()
		{
			return this._length;
		},

		/**
		 *	Return the speed
		 *
		 *	@return int
		 **/
		getSpeed: function()
		{
			return this._speed;
		},

		/**
		 *	Return the framerate
		 *
		 *	@return int
		 **/
		getFramerate: function()
		{
			return this._framerate;
		},

		//===========/----------------------------------------------
		//  [_MTD]  /  Methods public
		//=========/------------------------------------------------

		/**
		 *	El constructor
		 *
		 *	@param img jQueryElement
		 *	@param ready Function ready callback
		 **/
		construct: function( img, ready ) 
		{
			this.img = img;
			this.ready = ready;

			this.init();
		},

		/**
		 *	Init the class
		 **/
		init: function() 
		{
			if (!this.img[0].complete)
				this.img.on( 'load', onLoadComplete.bind(this) )
			else
				this.getData();
		},

		/**
		 *	Retrieve the informations stored in the file
		 **/
		getData: function()
		{
			this.bitmap = new createjs.Bitmap( this.img );
			BinaryAjax( this.img[0].src, parseImage.bind(this) );
		},

		/** 
		 *	Return the requested frame
		 *
		 *	@param index int
		 *	@return createjs.Bitmap
		 **/	
		getFrame: function( index )
		{
			var data = this.sheet.getFrame( index );

			// var el = jQuery('<div>').addClass('domframe');
			// el.css({
			// 	'background-image': 'url('+this.img[0].src+')',
			// 	'background-position': data.rect.x+'px '+data.rect.y+'px',
			// 	width: this._width,
			// 	height: this._height,
			// });

			var r = data.rect;

			var c = jQuery('<div>')
						.addClass('domcontainer')
						.css({
							width: this._width,
							height: this._height,
							overflow: 'hidden'
						});

			var el = jQuery('<img>')
						.addClass('domframe')
						.attr({
							src: this.img[0].src,
						})
						.css({
							left: -data.rect.x+'px',
							top: -data.rect.y+'px'
						})
			;

			c.append( el );

			return c;
		},

		/**	
		 *	Return the animation wrapped in a sprite
		 *
		 *	@return createjs.Sprite
		 **/
		getSprite: function()
		{
			var ret = new createjs.Sprite( this.sheet );
			return ret;
		}	
	});

	//===========/----------------------------------------------
	//  [_PRI]  /  Methods private
	//=========/------------------------------------------------

	/**
	 *	Parse the image binary data and find the holy grale
	 *
	 *	@param http XMLHttpRequest
	 **/
	function parseImage( http )
	{
		var data = http.binaryResponse;

		if (data.getByteAt(0) != 0xFF || data.getByteAt(1) != 0xD8) 
		{
			return false; // not a valid jpeg
		}

		var length = data.getLength()-2;
		var i = length-100;
		var marker;

		// retrieve the data based on the marker sequence
		var pos = 0;
		var sequence = [0x2f, 0x2f, 0x67, 0x69, 0x66, 0x64, 0x61, 0x74, 0x61, 0x2F, 0x2F, 0x2D, 0x2D];
		var m = sequence.length;
		var flag = sequence[0];
		var s = ''
		var found = false

		while (i++ < length)
		{
			marker = data.getByteAt(i);

			if ( marker == flag )
			{
				pos ++;

				if ( pos == m )
				{
					found = true;
					i++;
				}
				else
				{
					flag = sequence[pos];
					continue;
				}
			}

			if ( found )
			{
				s += data.getCharAt(i);
			}
		}

		parseData.call( this, s );
	}

	/**
	 *	Parse the information stored in the file
	 *
	 *	@param data String
	 **/
	function parseData( data ) 
	{
		data = data.split('&');
		var n = data.length;
		var el;
		var key, val;
		while( n-- )
		{
			el = data[n];
			el = el.split('=');
			key = el[0];
			val = el[1];

			switch( key )
			{
				case 'count':
					this._length = val | 0;
					break;

				case 'width':
					this._width = val | 0;
					break;

				case 'height':
					this._height = val | 0;
					break;

				case 'speed':
					this._speed = parseFloat( val );
					break;

				case 'framerate':
					this._framerate = val | 0;
					break;
			}
		}

		// create the spritesheet
		var data = {
			framerate: this._framerate,
			images: this.img,
			frames: { width: this._width, height: this._height, count: this._length, speed:1 }
		}
		this.sheet = new createjs.SpriteSheet( data );

		this.ready();
	}

	/**
	 *	on image load complete
	 **/
	function onLoadComplete(event) 
	{
		this.getData();
	}

})(window);